/* Auto-generated by genmsg_cpp for file /home/vsunder/ButlerBot/rosbuild_ws/src/behaviors/msg/Shutdown.msg */
#ifndef BEHAVIORS_MESSAGE_SHUTDOWN_H
#define BEHAVIORS_MESSAGE_SHUTDOWN_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace behaviors
{
template <class ContainerAllocator>
struct Shutdown_ {
  typedef Shutdown_<ContainerAllocator> Type;

  Shutdown_()
  : param(0)
  {
  }

  Shutdown_(const ContainerAllocator& _alloc)
  : param(0)
  {
  }

  typedef int8_t _param_type;
  int8_t param;


  typedef boost::shared_ptr< ::behaviors::Shutdown_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::behaviors::Shutdown_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct Shutdown
typedef  ::behaviors::Shutdown_<std::allocator<void> > Shutdown;

typedef boost::shared_ptr< ::behaviors::Shutdown> ShutdownPtr;
typedef boost::shared_ptr< ::behaviors::Shutdown const> ShutdownConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::behaviors::Shutdown_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::behaviors::Shutdown_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace behaviors

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::behaviors::Shutdown_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::behaviors::Shutdown_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::behaviors::Shutdown_<ContainerAllocator> > {
  static const char* value() 
  {
    return "79eb0cf468bb6f912ef9f175b768ef45";
  }

  static const char* value(const  ::behaviors::Shutdown_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x79eb0cf468bb6f91ULL;
  static const uint64_t static_value2 = 0x2ef9f175b768ef45ULL;
};

template<class ContainerAllocator>
struct DataType< ::behaviors::Shutdown_<ContainerAllocator> > {
  static const char* value() 
  {
    return "behaviors/Shutdown";
  }

  static const char* value(const  ::behaviors::Shutdown_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::behaviors::Shutdown_<ContainerAllocator> > {
  static const char* value() 
  {
    return "int8 param\n\
";
  }

  static const char* value(const  ::behaviors::Shutdown_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::behaviors::Shutdown_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::behaviors::Shutdown_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.param);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct Shutdown_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::behaviors::Shutdown_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::behaviors::Shutdown_<ContainerAllocator> & v) 
  {
    s << indent << "param: ";
    Printer<int8_t>::stream(s, indent + "  ", v.param);
  }
};


} // namespace message_operations
} // namespace ros

#endif // BEHAVIORS_MESSAGE_SHUTDOWN_H

