/* Auto-generated by genmsg_cpp for file /home/vsunder/ButlerBot/rosbuild_ws/src/behavior_manager/srv/Startup.srv */
#ifndef BEHAVIOR_MANAGER_SERVICE_STARTUP_H
#define BEHAVIOR_MANAGER_SERVICE_STARTUP_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace behavior_manager
{
template <class ContainerAllocator>
struct StartupRequest_ {
  typedef StartupRequest_<ContainerAllocator> Type;

  StartupRequest_()
  : behaviors()
  {
  }

  StartupRequest_(const ContainerAllocator& _alloc)
  : behaviors(_alloc)
  {
  }

  typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _behaviors_type;
  std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  behaviors;


  typedef boost::shared_ptr< ::behavior_manager::StartupRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::behavior_manager::StartupRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct StartupRequest
typedef  ::behavior_manager::StartupRequest_<std::allocator<void> > StartupRequest;

typedef boost::shared_ptr< ::behavior_manager::StartupRequest> StartupRequestPtr;
typedef boost::shared_ptr< ::behavior_manager::StartupRequest const> StartupRequestConstPtr;


template <class ContainerAllocator>
struct StartupResponse_ {
  typedef StartupResponse_<ContainerAllocator> Type;

  StartupResponse_()
  : ready(false)
  {
  }

  StartupResponse_(const ContainerAllocator& _alloc)
  : ready(false)
  {
  }

  typedef uint8_t _ready_type;
  uint8_t ready;


  typedef boost::shared_ptr< ::behavior_manager::StartupResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::behavior_manager::StartupResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct StartupResponse
typedef  ::behavior_manager::StartupResponse_<std::allocator<void> > StartupResponse;

typedef boost::shared_ptr< ::behavior_manager::StartupResponse> StartupResponsePtr;
typedef boost::shared_ptr< ::behavior_manager::StartupResponse const> StartupResponseConstPtr;

struct Startup
{

typedef StartupRequest Request;
typedef StartupResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct Startup
} // namespace behavior_manager

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::behavior_manager::StartupRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::behavior_manager::StartupRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::behavior_manager::StartupRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "715783c8c6eb28fc2e1c05184add75ec";
  }

  static const char* value(const  ::behavior_manager::StartupRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x715783c8c6eb28fcULL;
  static const uint64_t static_value2 = 0x2e1c05184add75ecULL;
};

template<class ContainerAllocator>
struct DataType< ::behavior_manager::StartupRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "behavior_manager/StartupRequest";
  }

  static const char* value(const  ::behavior_manager::StartupRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::behavior_manager::StartupRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "string[] behaviors\n\
\n\
";
  }

  static const char* value(const  ::behavior_manager::StartupRequest_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::behavior_manager::StartupResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::behavior_manager::StartupResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::behavior_manager::StartupResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "6f378c6311f9e6ccd2cd8c5b327003f1";
  }

  static const char* value(const  ::behavior_manager::StartupResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x6f378c6311f9e6ccULL;
  static const uint64_t static_value2 = 0xd2cd8c5b327003f1ULL;
};

template<class ContainerAllocator>
struct DataType< ::behavior_manager::StartupResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "behavior_manager/StartupResponse";
  }

  static const char* value(const  ::behavior_manager::StartupResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::behavior_manager::StartupResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "bool ready\n\
\n\
\n\
";
  }

  static const char* value(const  ::behavior_manager::StartupResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::behavior_manager::StartupResponse_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::behavior_manager::StartupRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.behaviors);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct StartupRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::behavior_manager::StartupResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.ready);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct StartupResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<behavior_manager::Startup> {
  static const char* value() 
  {
    return "ab50bb0a9fcede9941600c633c75463f";
  }

  static const char* value(const behavior_manager::Startup&) { return value(); } 
};

template<>
struct DataType<behavior_manager::Startup> {
  static const char* value() 
  {
    return "behavior_manager/Startup";
  }

  static const char* value(const behavior_manager::Startup&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<behavior_manager::StartupRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ab50bb0a9fcede9941600c633c75463f";
  }

  static const char* value(const behavior_manager::StartupRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<behavior_manager::StartupRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "behavior_manager/Startup";
  }

  static const char* value(const behavior_manager::StartupRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<behavior_manager::StartupResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ab50bb0a9fcede9941600c633c75463f";
  }

  static const char* value(const behavior_manager::StartupResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<behavior_manager::StartupResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "behavior_manager/Startup";
  }

  static const char* value(const behavior_manager::StartupResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // BEHAVIOR_MANAGER_SERVICE_STARTUP_H

