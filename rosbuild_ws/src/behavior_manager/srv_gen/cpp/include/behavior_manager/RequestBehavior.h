/* Auto-generated by genmsg_cpp for file /home/vsunder/ButlerBot/rosbuild_ws/src/behavior_manager/srv/RequestBehavior.srv */
#ifndef BEHAVIOR_MANAGER_SERVICE_REQUESTBEHAVIOR_H
#define BEHAVIOR_MANAGER_SERVICE_REQUESTBEHAVIOR_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace behavior_manager
{
template <class ContainerAllocator>
struct RequestBehaviorRequest_ {
  typedef RequestBehaviorRequest_<ContainerAllocator> Type;

  RequestBehaviorRequest_()
  : behavior()
  , params()
  , priority(0)
  {
  }

  RequestBehaviorRequest_(const ContainerAllocator& _alloc)
  : behavior(_alloc)
  , params(_alloc)
  , priority(0)
  {
  }

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _behavior_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  behavior;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _params_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  params;

  typedef uint8_t _priority_type;
  uint8_t priority;


  typedef boost::shared_ptr< ::behavior_manager::RequestBehaviorRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::behavior_manager::RequestBehaviorRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct RequestBehaviorRequest
typedef  ::behavior_manager::RequestBehaviorRequest_<std::allocator<void> > RequestBehaviorRequest;

typedef boost::shared_ptr< ::behavior_manager::RequestBehaviorRequest> RequestBehaviorRequestPtr;
typedef boost::shared_ptr< ::behavior_manager::RequestBehaviorRequest const> RequestBehaviorRequestConstPtr;


template <class ContainerAllocator>
struct RequestBehaviorResponse_ {
  typedef RequestBehaviorResponse_<ContainerAllocator> Type;

  RequestBehaviorResponse_()
  : ready(false)
  {
  }

  RequestBehaviorResponse_(const ContainerAllocator& _alloc)
  : ready(false)
  {
  }

  typedef uint8_t _ready_type;
  uint8_t ready;


  typedef boost::shared_ptr< ::behavior_manager::RequestBehaviorResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::behavior_manager::RequestBehaviorResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct RequestBehaviorResponse
typedef  ::behavior_manager::RequestBehaviorResponse_<std::allocator<void> > RequestBehaviorResponse;

typedef boost::shared_ptr< ::behavior_manager::RequestBehaviorResponse> RequestBehaviorResponsePtr;
typedef boost::shared_ptr< ::behavior_manager::RequestBehaviorResponse const> RequestBehaviorResponseConstPtr;

struct RequestBehavior
{

typedef RequestBehaviorRequest Request;
typedef RequestBehaviorResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct RequestBehavior
} // namespace behavior_manager

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::behavior_manager::RequestBehaviorRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::behavior_manager::RequestBehaviorRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::behavior_manager::RequestBehaviorRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "43f65bb43dfc169eae75c5e9aa168500";
  }

  static const char* value(const  ::behavior_manager::RequestBehaviorRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x43f65bb43dfc169eULL;
  static const uint64_t static_value2 = 0xae75c5e9aa168500ULL;
};

template<class ContainerAllocator>
struct DataType< ::behavior_manager::RequestBehaviorRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "behavior_manager/RequestBehaviorRequest";
  }

  static const char* value(const  ::behavior_manager::RequestBehaviorRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::behavior_manager::RequestBehaviorRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "string behavior\n\
string params\n\
uint8 priority\n\
\n\
";
  }

  static const char* value(const  ::behavior_manager::RequestBehaviorRequest_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::behavior_manager::RequestBehaviorResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::behavior_manager::RequestBehaviorResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::behavior_manager::RequestBehaviorResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "6f378c6311f9e6ccd2cd8c5b327003f1";
  }

  static const char* value(const  ::behavior_manager::RequestBehaviorResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x6f378c6311f9e6ccULL;
  static const uint64_t static_value2 = 0xd2cd8c5b327003f1ULL;
};

template<class ContainerAllocator>
struct DataType< ::behavior_manager::RequestBehaviorResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "behavior_manager/RequestBehaviorResponse";
  }

  static const char* value(const  ::behavior_manager::RequestBehaviorResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::behavior_manager::RequestBehaviorResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "bool ready\n\
\n\
\n\
";
  }

  static const char* value(const  ::behavior_manager::RequestBehaviorResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::behavior_manager::RequestBehaviorResponse_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::behavior_manager::RequestBehaviorRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.behavior);
    stream.next(m.params);
    stream.next(m.priority);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct RequestBehaviorRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::behavior_manager::RequestBehaviorResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.ready);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct RequestBehaviorResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<behavior_manager::RequestBehavior> {
  static const char* value() 
  {
    return "2940e13ef63b4c709c633ce2856d4801";
  }

  static const char* value(const behavior_manager::RequestBehavior&) { return value(); } 
};

template<>
struct DataType<behavior_manager::RequestBehavior> {
  static const char* value() 
  {
    return "behavior_manager/RequestBehavior";
  }

  static const char* value(const behavior_manager::RequestBehavior&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<behavior_manager::RequestBehaviorRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "2940e13ef63b4c709c633ce2856d4801";
  }

  static const char* value(const behavior_manager::RequestBehaviorRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<behavior_manager::RequestBehaviorRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "behavior_manager/RequestBehavior";
  }

  static const char* value(const behavior_manager::RequestBehaviorRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<behavior_manager::RequestBehaviorResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "2940e13ef63b4c709c633ce2856d4801";
  }

  static const char* value(const behavior_manager::RequestBehaviorResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<behavior_manager::RequestBehaviorResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "behavior_manager/RequestBehavior";
  }

  static const char* value(const behavior_manager::RequestBehaviorResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // BEHAVIOR_MANAGER_SERVICE_REQUESTBEHAVIOR_H

