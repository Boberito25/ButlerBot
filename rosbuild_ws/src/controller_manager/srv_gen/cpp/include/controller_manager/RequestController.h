/* Auto-generated by genmsg_cpp for file /home/vsunder/ButlerBot/rosbuild_ws/src/controller_manager/srv/RequestController.srv */
#ifndef CONTROLLER_MANAGER_SERVICE_REQUESTCONTROLLER_H
#define CONTROLLER_MANAGER_SERVICE_REQUESTCONTROLLER_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace controller_manager
{
template <class ContainerAllocator>
struct RequestControllerRequest_ {
  typedef RequestControllerRequest_<ContainerAllocator> Type;

  RequestControllerRequest_()
  : controller()
  {
  }

  RequestControllerRequest_(const ContainerAllocator& _alloc)
  : controller(_alloc)
  {
  }

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _controller_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  controller;


  typedef boost::shared_ptr< ::controller_manager::RequestControllerRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::controller_manager::RequestControllerRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct RequestControllerRequest
typedef  ::controller_manager::RequestControllerRequest_<std::allocator<void> > RequestControllerRequest;

typedef boost::shared_ptr< ::controller_manager::RequestControllerRequest> RequestControllerRequestPtr;
typedef boost::shared_ptr< ::controller_manager::RequestControllerRequest const> RequestControllerRequestConstPtr;


template <class ContainerAllocator>
struct RequestControllerResponse_ {
  typedef RequestControllerResponse_<ContainerAllocator> Type;

  RequestControllerResponse_()
  : granted(false)
  {
  }

  RequestControllerResponse_(const ContainerAllocator& _alloc)
  : granted(false)
  {
  }

  typedef uint8_t _granted_type;
  uint8_t granted;


  typedef boost::shared_ptr< ::controller_manager::RequestControllerResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::controller_manager::RequestControllerResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct RequestControllerResponse
typedef  ::controller_manager::RequestControllerResponse_<std::allocator<void> > RequestControllerResponse;

typedef boost::shared_ptr< ::controller_manager::RequestControllerResponse> RequestControllerResponsePtr;
typedef boost::shared_ptr< ::controller_manager::RequestControllerResponse const> RequestControllerResponseConstPtr;

struct RequestController
{

typedef RequestControllerRequest Request;
typedef RequestControllerResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct RequestController
} // namespace controller_manager

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::controller_manager::RequestControllerRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::controller_manager::RequestControllerRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::controller_manager::RequestControllerRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "36383e0f0fa46585abbab8aedd87321a";
  }

  static const char* value(const  ::controller_manager::RequestControllerRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x36383e0f0fa46585ULL;
  static const uint64_t static_value2 = 0xabbab8aedd87321aULL;
};

template<class ContainerAllocator>
struct DataType< ::controller_manager::RequestControllerRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "controller_manager/RequestControllerRequest";
  }

  static const char* value(const  ::controller_manager::RequestControllerRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::controller_manager::RequestControllerRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "string controller\n\
\n\
";
  }

  static const char* value(const  ::controller_manager::RequestControllerRequest_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::controller_manager::RequestControllerResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::controller_manager::RequestControllerResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::controller_manager::RequestControllerResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "533a1a15b72d30883c3d287970add034";
  }

  static const char* value(const  ::controller_manager::RequestControllerResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x533a1a15b72d3088ULL;
  static const uint64_t static_value2 = 0x3c3d287970add034ULL;
};

template<class ContainerAllocator>
struct DataType< ::controller_manager::RequestControllerResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "controller_manager/RequestControllerResponse";
  }

  static const char* value(const  ::controller_manager::RequestControllerResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::controller_manager::RequestControllerResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "bool granted\n\
\n\
\n\
";
  }

  static const char* value(const  ::controller_manager::RequestControllerResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::controller_manager::RequestControllerResponse_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::controller_manager::RequestControllerRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.controller);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct RequestControllerRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::controller_manager::RequestControllerResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.granted);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct RequestControllerResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<controller_manager::RequestController> {
  static const char* value() 
  {
    return "aae7884dcb58d0f44a9c8644f3d0d6df";
  }

  static const char* value(const controller_manager::RequestController&) { return value(); } 
};

template<>
struct DataType<controller_manager::RequestController> {
  static const char* value() 
  {
    return "controller_manager/RequestController";
  }

  static const char* value(const controller_manager::RequestController&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<controller_manager::RequestControllerRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "aae7884dcb58d0f44a9c8644f3d0d6df";
  }

  static const char* value(const controller_manager::RequestControllerRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<controller_manager::RequestControllerRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "controller_manager/RequestController";
  }

  static const char* value(const controller_manager::RequestControllerRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<controller_manager::RequestControllerResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "aae7884dcb58d0f44a9c8644f3d0d6df";
  }

  static const char* value(const controller_manager::RequestControllerResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<controller_manager::RequestControllerResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "controller_manager/RequestController";
  }

  static const char* value(const controller_manager::RequestControllerResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // CONTROLLER_MANAGER_SERVICE_REQUESTCONTROLLER_H

