/* Auto-generated by genmsg_cpp for file /home/pwei/Desktop/ButlerBot/rosbuild_ws/src/controllers/srv/armMove.srv */
#ifndef CONTROLLERS_SERVICE_ARMMOVE_H
#define CONTROLLERS_SERVICE_ARMMOVE_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace controllers
{
template <class ContainerAllocator>
struct armMoveRequest_ {
  typedef armMoveRequest_<ContainerAllocator> Type;

  armMoveRequest_()
  : base(0)
  , shoulder(0)
  , shoulder1(0)
  , elbow(0)
  , elbow1(0)
  , wrist(0)
  , wrot(0)
  , grip(0)
  {
  }

  armMoveRequest_(const ContainerAllocator& _alloc)
  : base(0)
  , shoulder(0)
  , shoulder1(0)
  , elbow(0)
  , elbow1(0)
  , wrist(0)
  , wrot(0)
  , grip(0)
  {
  }

  typedef int16_t _base_type;
  int16_t base;

  typedef int16_t _shoulder_type;
  int16_t shoulder;

  typedef int16_t _shoulder1_type;
  int16_t shoulder1;

  typedef int16_t _elbow_type;
  int16_t elbow;

  typedef int16_t _elbow1_type;
  int16_t elbow1;

  typedef int16_t _wrist_type;
  int16_t wrist;

  typedef int16_t _wrot_type;
  int16_t wrot;

  typedef int16_t _grip_type;
  int16_t grip;


  typedef boost::shared_ptr< ::controllers::armMoveRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::controllers::armMoveRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct armMoveRequest
typedef  ::controllers::armMoveRequest_<std::allocator<void> > armMoveRequest;

typedef boost::shared_ptr< ::controllers::armMoveRequest> armMoveRequestPtr;
typedef boost::shared_ptr< ::controllers::armMoveRequest const> armMoveRequestConstPtr;



template <class ContainerAllocator>
struct armMoveResponse_ {
  typedef armMoveResponse_<ContainerAllocator> Type;

  armMoveResponse_()
  : success(false)
  {
  }

  armMoveResponse_(const ContainerAllocator& _alloc)
  : success(false)
  {
  }

  typedef uint8_t _success_type;
  uint8_t success;


  typedef boost::shared_ptr< ::controllers::armMoveResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::controllers::armMoveResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct armMoveResponse
typedef  ::controllers::armMoveResponse_<std::allocator<void> > armMoveResponse;

typedef boost::shared_ptr< ::controllers::armMoveResponse> armMoveResponsePtr;
typedef boost::shared_ptr< ::controllers::armMoveResponse const> armMoveResponseConstPtr;


struct armMove
{

typedef armMoveRequest Request;
typedef armMoveResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct armMove
} // namespace controllers

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::controllers::armMoveRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::controllers::armMoveRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::controllers::armMoveRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ac905efe303267c46f982709d9b792e6";
  }

  static const char* value(const  ::controllers::armMoveRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xac905efe303267c4ULL;
  static const uint64_t static_value2 = 0x6f982709d9b792e6ULL;
};

template<class ContainerAllocator>
struct DataType< ::controllers::armMoveRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "controllers/armMoveRequest";
  }

  static const char* value(const  ::controllers::armMoveRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::controllers::armMoveRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "int16 base\n\
int16 shoulder\n\
int16 shoulder1\n\
int16 elbow\n\
int16 elbow1\n\
int16 wrist\n\
int16 wrot\n\
int16 grip\n\
\n\
";
  }

  static const char* value(const  ::controllers::armMoveRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::controllers::armMoveRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::controllers::armMoveResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::controllers::armMoveResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::controllers::armMoveResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "358e233cde0c8a8bcfea4ce193f8fc15";
  }

  static const char* value(const  ::controllers::armMoveResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x358e233cde0c8a8bULL;
  static const uint64_t static_value2 = 0xcfea4ce193f8fc15ULL;
};

template<class ContainerAllocator>
struct DataType< ::controllers::armMoveResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "controllers/armMoveResponse";
  }

  static const char* value(const  ::controllers::armMoveResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::controllers::armMoveResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "bool success\n\
\n\
";
  }

  static const char* value(const  ::controllers::armMoveResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::controllers::armMoveResponse_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::controllers::armMoveRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.base);
    stream.next(m.shoulder);
    stream.next(m.shoulder1);
    stream.next(m.elbow);
    stream.next(m.elbow1);
    stream.next(m.wrist);
    stream.next(m.wrot);
    stream.next(m.grip);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct armMoveRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::controllers::armMoveResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.success);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct armMoveResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<controllers::armMove> {
  static const char* value() 
  {
    return "407a8b06ff8c582b34020cd9a18a6609";
  }

  static const char* value(const controllers::armMove&) { return value(); } 
};

template<>
struct DataType<controllers::armMove> {
  static const char* value() 
  {
    return "controllers/armMove";
  }

  static const char* value(const controllers::armMove&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<controllers::armMoveRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "407a8b06ff8c582b34020cd9a18a6609";
  }

  static const char* value(const controllers::armMoveRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<controllers::armMoveRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "controllers/armMove";
  }

  static const char* value(const controllers::armMoveRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<controllers::armMoveResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "407a8b06ff8c582b34020cd9a18a6609";
  }

  static const char* value(const controllers::armMoveResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<controllers::armMoveResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "controllers/armMove";
  }

  static const char* value(const controllers::armMoveResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // CONTROLLERS_SERVICE_ARMMOVE_H

